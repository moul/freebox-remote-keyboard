// Generated by CoffeeScript 1.4.0
(function() {
  var Base, EventEmitter,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  EventEmitter = require('events').EventEmitter;

  Base = (function(_super) {

    __extends(Base, _super);

    function Base(options) {
      this.options = options != null ? options : {};
      this.log = __bind(this.log, this);

      return this;
    }

    Base.prototype.log = function() {
      var args, name, _ref, _ref1;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!this.options.verbose) {
        return false;
      }
      name = (typeof this !== "undefined" && this !== null ? (_ref = this.constructor) != null ? typeof _ref.toString === "function" ? (_ref1 = _ref.toString().match(/function\s*(\w+)/)) != null ? _ref1[1] : void 0 : void 0 : void 0 : void 0) || 'Base';
      return console.log.apply(console, ["" + name + ">"].concat(__slice.call(args)));
    };

    return Base;

  })(EventEmitter);

  module.exports = {
    Base: Base
  };

}).call(this);
